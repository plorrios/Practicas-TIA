(deftemplate Agrietamiento    			;Variable difusa
	0 100 porcentaje          			;Universo
   ((ligero(10 1)(20 0))	  			;Valores difusos
	(medio (5 0)(25 1)(45 1)(55 0))
	(fuerte (50 0)(60 1))
	)
)
	
	
(deftemplate Temperatura		  		;Variable difusa
    -10 90 grados						;Universo
   ((fria (5 1)(10 0))					;Valores difusos
	(moderada (-5 0)(15 1)(40 1)(50 0))	
	(calida (35 0)(45 1))
	)
)

(deftemplate necesidad-reasfaltado		;Variable difusa
	0 100 necesidad						;Universo
   ((baja(z 10 25))						;Valores difusos
	(media(pi 15 60))				
	(urgente(s 55 90))
	)
)

(deftemplate densidad-trafico			;variable difusa
	0 300 coches						;Universo
   ((baja(z 20 80))
	(alta (s 120 250))
	)
)
(deftemplate carretera
	(slot nombre (type SYMBOL))
	(slot Agrietamiento (type INTEGER))
	(slot Temperatura (type INTEGER))
	(slot necesidad-reasfaltado (type INTEGER))
	(slot densidad-trafico (type INTEGER))
)

(deffunction fuzzify (?fztemplate ?value ?delta)

        (bind ?low (get-u-from ?fztemplate))
        (bind ?hi  (get-u-to   ?fztemplate))

        (if (<= ?value ?low)
          then
            (assert-string
              (format nil "(%s (%g 1.0) (%g 0.0))" ?fztemplate ?low ?delta))
          else
            (if (>= ?value ?hi)
              then
                (assert-string
                   (format nil "(%s (%g 0.0) (%g 1.0))"
                               ?fztemplate (- ?hi ?delta) ?hi))
              else
                (assert-string
                   (format nil "(%s (%g 0.0) (%g 1.0) (%g 0.0))"
                               ?fztemplate (max ?low (- ?value ?delta))
                               ?value (min ?hi (+ ?value ?delta)) ))
            )
        )
)



(defrule danos1-1
	(Agrietamiento ligero)
	(Temperatura fria)
	=>
	(assert (necesidad-reasfaltado media))
)
(defrule danos2-1
	(Agrietamiento medio)
	(Temperatura fria)
	=>
	(assert (necesidad-reasfaltado urgente))
)
(defrule danos3-1
	(Agrietamiento fuerte)
	(Temperatura fria)
	=>
	(assert (necesidad-reasfaltado extremely urgente))
)
(defrule danos1-2
	(Agrietamiento ligero)
	(Temperatura moderada)
	=>
	(assert (necesidad-reasfaltado very baja))
)
(defrule danos2-2
	(Agrietamiento medio)
	(Temperatura moderada)
	=>
	(assert (necesidad-reasfaltado baja))
)
(defrule danos3-2
	(Agrietamiento fuerte)
	(Temperatura moderada)
	=>
	(assert (necesidad-reasfaltado somewhat media))
)
(defrule danos1-3
	(Agrietamiento ligero)
	(Temperatura calida)
	=>
	(assert (necesidad-reasfaltado media))
)
(defrule danos2-3
	(Agrietamiento medio)
	(Temperatura calida)
	=>
	(assert (necesidad-reasfaltado very urgente))
)
(defrule danos3-3
	(Agrietamiento fuerte)
	(Temperatura calida)
	=>
	(assert (necesidad-reasfaltado extremely urgente))
)
(defrule densidad-trafico-baja
	(densidad-trafico baja)
	=>
	(assert (necesidad-reasfaltado more-or-less baja))
)
(defrule densidad-trafico-alta
	(densidad-trafico alta)
	=>
	(assert (necesidad-reasfaltado very urgente))
)


(defrule fuzzy1
	(declare (salience -100))
	(necesidad-reasfaltado ?f)
	=>
	(bind ?e (maximum-defuzzify ?f))
	(printout t "En fuzzy1(maximum), prioridad es" ?e crlf)
)

(defrule fuzzy2
	(declare (salience -100))
	(necesidad-reasfaltado ?f)
	=>
	(bind ?e (moment-defuzzify ?f))
	(printout t "En fuzzy2(moment), prioridad es" ?e crlf)
)
	
	
	
(defrule leerconsola
	(initial-fact)
	=>
	(printout t"introduce la información de la carretera" crlf)
	(printout t"introduce el agrietamiento" crlf)
	(bind ?Redad1 (read))
	(fuzzify Agrietamiento ?Redad1 0)
	(printout t"introduce la temperatura mínima" crlf)
	(bind ?Redad2 (read))
	(fuzzify Temperatura ?Redad2 0)
	(printout t"introduce la temperatura máxima" crlf)
	(bind ?Redad3 (read))
	(fuzzify Temperatura ?Redad3 0)
	(printout t"introduce la densidad de trafico" crlf)
	(bind ?Redad4 (read))
	(fuzzify densidad-trafico ?Redad4 0)
)